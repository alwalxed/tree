This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where comments have been removed, empty lines have been removed, content has been compressed (code blocks are separated by ⋮---- delimiter).

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Empty lines have been removed from all files
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
helpers/
  flatten-tree.ts
  normalize-slug.ts
  normalize-title.ts
  parse-file-order.ts
  walk-tree.ts
operations/
  build-summary-tree.ts
  get-breadcrumbs.ts
  get-content-node.ts
  get-deepest-node.ts
  get-leaf-nodes.ts
  get-node-slug-path.ts
  get-tree-slugs.ts
types.ts

================================================================
Files
================================================================

================
File: helpers/flatten-tree.ts
================
import type { SummaryNode } from "../types";
import { walkTree } from "./walk-tree";
export function flattenTree(tree: SummaryNode[]): SummaryNode[]

================
File: helpers/normalize-slug.ts
================
import { transliterate } from "@/lib/text/transliteration";
export function normalizeSlug(raw: string): string

================
File: helpers/normalize-title.ts
================
export function normalizeTitle(raw: string): string

================
File: helpers/parse-file-order.ts
================
import { transliterate } from "@/lib/text/transliteration";
export function parseFileOrder(name: string):

================
File: helpers/walk-tree.ts
================
export function walkTree<T extends { slug: string; children: T[] }>(
  nodes: T[],
  callback: (node: T, path: string[], level: number) => void,
  path: string[] = [],
  level: number = 0
): void

================
File: operations/build-summary-tree.ts
================
import fs from "fs";
import path from "path";
import { normalizeSlug } from "../helpers/normalize-slug";
import { normalizeTitle } from "../helpers/normalize-title";
import { parseFileOrder } from "../helpers/parse-file-order";
import type { SummaryNode } from "../types";
⋮----
async function walkDir(
  dir: string,
  parentPath: string[] = []
): Promise<SummaryNode[]>
export async function buildSummaryTree(): Promise<SummaryNode[]>

================
File: operations/get-breadcrumbs.ts
================
import type { SummaryNode } from "../types";
import { findDeepestNode } from "./get-deepest-node";
export function getBreadcrumbs(
  node: SummaryNode,
  tree: SummaryNode[]
):

================
File: operations/get-content-node.ts
================
import fs from "fs";
import matter from "gray-matter";
import path from "path";
import { remark } from "remark";
import html from "remark-html";
import { normalizeSlug } from "../helpers/normalize-slug";
import { normalizeTitle } from "../helpers/normalize-title";
import { parseFileOrder } from "../helpers/parse-file-order";
import type { ContentNode } from "../types";
⋮----
export async function getContentNode(
  slugPath: string[]
): Promise<ContentNode | null>

================
File: operations/get-deepest-node.ts
================
import type { SummaryNode } from "../types";
export function findDeepestNode(
  tree: SummaryNode[],
  slugPath: string[]
): SummaryNode | null

================
File: operations/get-leaf-nodes.ts
================
import type { LeafNode, SummaryNode } from "../types";
export function getLeafNodes(tree: SummaryNode[]): LeafNode[]
⋮----
function walk(node: SummaryNode, path: string[] = [])

================
File: operations/get-node-slug-path.ts
================
import { SummaryNode } from "../types";
export function getNodeSlugPath(node: SummaryNode): string

================
File: operations/get-tree-slugs.ts
================
import type { SummaryNode } from "../types";
import { buildSummaryTree } from "./build-summary-tree";
export async function getTreeSlugs(): Promise<string[][]>
⋮----
function traverse(node: SummaryNode, path: string[] = [])

================
File: types.ts
================
type BaseNode = {
  title: string;
  slug: string;
};
type HierarchyMeta = {
  order: number;
  parentPath: string[];
};
export type SummaryNode = BaseNode &
  HierarchyMeta & {
    children: SummaryNode[];
  };
export type ContentNode = SummaryNode & {
  excerpt?: string;
  contentHtml: string;
};
export type LeafNode = BaseNode;



================================================================
End of Codebase
================================================================
